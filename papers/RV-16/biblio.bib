
@inproceedings{jansen_sense_2009,
	title = {A sense of community: {A} research agenda for software ecosystems},
	shorttitle = {A sense of community},
	doi = {10.1109/ICSE-COMPANION.2009.5070978},
	abstract = {Software vendors lack the perspective to develop software within a software ecosystem. The inability to function in a software ecosystem has already led to the demise of many software vendors, leading to loss of competition, intellectual property, and eventually jobs in the software industry. In this paper we present a research agenda on software ecosystems to study both the technical and the business aspects of software engineering in vibrant ecosystems. The results of such research enable software vendors to develop software that is adaptable to new business models and new markets, and to make strategic choices that help a software vendor to thrive in a software ecosystem.},
	booktitle = {31st {International} {Conference} on {Software} {Engineering} - {Companion} {Volume}, 2009. {ICSE}-{Companion} 2009},
	author = {Jansen, S. and Finkelstein, A. and Brinkkemper, S.},
	month = may,
	year = {2009},
	keywords = {Books, Computer industry, DP industry, Ecosystems, Educational institutions, intellectual property, knowledge management, Portfolios, software ecosystems, software engineering, software industry, Software standards, software vendors, Standards development},
	pages = {187--190},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/IAR8B8D3/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/UIX2F8VV/Jansen et al. - 2009 - A sense of community A research agenda for softwa.pdf:application/pdf}
}

@article{bavota_impact_2015,
	title = {The {Impact} of {API} {Change}- and {Fault}-{Proneness} on the {User} {Ratings} of {Android} {Apps}},
	volume = {41},
	issn = {0098-5589},
	doi = {10.1109/TSE.2014.2367027},
	abstract = {The mobile apps market is one of the fastest growing areas in the information technology. In digging their market share, developers must pay attention to building robust and reliable apps. In fact, users easily get frustrated by repeated failures, crashes, and other bugs; hence, they abandon some apps in favor of their competition. In this paper we investigate how the fault- and change-proneness of APIs used by Android apps relates to their success estimated as the average rating provided by the users to those apps. First, in a study conducted on 5,848 (free) apps, we analyzed how the ratings that an app had received correlated with the fault- and change-proneness of the APIs such app relied upon. After that, we surveyed 45 professional Android developers to assess (i) to what extent developers experienced problems when using APIs, and (ii) how much they felt these problems could be the cause for unfavorable user ratings. The results of our studies indicate that apps having high user ratings use APIs that are less fault- and change-prone than the APIs used by low rated apps. Also, most of the interviewed Android developers observed, in their development experience, a direct relationship between problems experienced with the adopted APIs and the users' ratings that their apps received.},
	number = {4},
	journal = {IEEE Transactions on Software Engineering},
	author = {Bavota, G. and Linares-Vasquez, M. and Bernal-Cardenas, C.E. and Di Penta, M. and Oliveto, R. and Poshyvanyk, D.},
	month = apr,
	year = {2015},
	keywords = {Android, Android Apps, Androids, API change-proneness, API changes, API fault-proneness, application program interfaces, Computer bugs, data mining, Educational institutions, Electronic mail, Empirical Studies, History, Humanoid robots, information technology, Mining Software Repositories, mobile Apps market, mobile computing, program debugging, Software, software fault tolerance, software repository mining, system recovery, user ratings},
	pages = {384--407},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/V9I9IQ3Q/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/FFC8BX4K/Bavota et al. - 2015 - The Impact of API Change- and Fault-Proneness on t.pdf:application/pdf}
}

@article{businge_eclipse_2013,
	title = {Eclipse {API} usage: the good and the bad},
	volume = {23},
	issn = {0963-9314, 1573-1367},
	shorttitle = {Eclipse {API} usage},
	url = {http://link.springer.com/article/10.1007/s11219-013-9221-3},
	doi = {10.1007/s11219-013-9221-3},
	abstract = {Today, when constructing software systems, many developers build their systems on top of frameworks. Eclipse is such a framework that has been in existence for over a decade. Like many other evolving software systems, the Eclipse platform has both stable and supported interfaces (“good”) and unstable, discouraged and unsupported interfaces (“bad”). In this study, we investigate Eclipse interface usage by Eclipse third-party plug-ins (ETPs) based on whether they use bad interfaces or not. The investigations, based on empirical analysis present the following observations. First, we discovered that 44 \% of the 512 analyzed Eclipse third-party plug-ins depend on “bad” interfaces and that developers continue to use “bad” interfaces. Second, we have observed that plug-ins that use or extend at least one “bad” interface are comparatively larger and use more functionality from Eclipse than those that use only “good” interfaces. Third, the findings show that the ETPs use a diverse set of “bad” interfaces. Fourth, we observed that the reason why the bad interfaces are being eliminated from the ETPs’ source code is, because (ETP developers believe) these non-APIs will cause incompatibilities when a version of the ETP is ported to new Eclipse SDK release. Finally, we observed that when developers eliminate problematic “bad” interfaces, they either re-implement the same functionality in their own API, find equivalent SDK good interfaces, or completely delete the entities in the ETPs’ source code that use the functionality from the “bad” interfaces.},
	language = {en},
	number = {1},
	urldate = {2015-12-15},
	journal = {Software Quality Journal},
	author = {Businge, John and Serebrenik, Alexander and Brand, Mark G. J. van den},
	month = oct,
	year = {2013},
	keywords = {API usage, Data Structures, Cryptology and Information Theory, Eclipse, operating systems, Programming Languages, Compilers, Interpreters, Software Engineering/Programming and Operating Systems, software evolution},
	pages = {107--141},
	file = {Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/6N8UDXXR/Businge et al. - 2013 - Eclipse API usage the good and the bad.pdf:application/pdf;Snapshot:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/4AQDET8N/10.html:text/html}
}

@inproceedings{businge_compatibility_2012,
	title = {Compatibility {Prediction} of {Eclipse} {Third}-{Party} {Plug}-ins in {New} {Eclipse} {Releases}},
	doi = {10.1109/SCAM.2012.10},
	abstract = {Incompatibility between applications developed on top of frameworks with new versions of the frameworks is a big nightmare to both developers and users of the applications. Understanding the factors that cause incompatibilities is a step to solving them. One such direction is to analyze and identify parts of the reusable code of the framework that are prone to change. In this study we carried out an empirical investigation on 11 Eclipse SDK releases (1.0 to 3.7) and 288 Eclipse third-party plug-ins (ETPs) with two main goals: First, to determine the relationship between the age of Eclipse non-APIs (internal implementations) used by an ETP and the compatibility of the ETP. We found that third-party plug-in that use only old non-APIs have a high chance of compatibility success in new SDK releases compared to those that use at least one newly introduced non-API. Second, our goal was to build and test a predictive model for the compatibility of an ETP, supported in a given SDK release in a newer SDK release. Our findings produced 23 statistically significant prediction models having high values of the strength of the relationship between the predictors and the prediction (logistic regression R2 of up to 0.810). In addition, the results from model testing indicate high values of up to 100\% of precision and recall and up to 98\% of accuracy of the predictions. Finally, despite the fact that SDK releases with API breaking changes, i.e., 1.0, 2.0 and 3.0, have got nothing to do with non-APIs, our findings reveal that non-APIs introduced in these releases have a significant impact on the compatibility of the ETPs that use them.},
	booktitle = {2012 {IEEE} 12th {International} {Working} {Conference} on {Source} {Code} {Analysis} and {Manipulation} ({SCAM})},
	author = {Businge, J. and Serebrenik, A. and van den Brand, M.},
	month = sep,
	year = {2012},
	keywords = {API breaking changes, Buildings, compatibility prediction, Eclipse, Eclipse non API, Eclipse SDK releases, Eclipse third-party plug-ins, ETP, Histograms, logistic regression, Logistics, Market research, Mathematical model, model testing, non-API, part analysis, part identification, Plugin, prediction, prediction models, predictive model, Predictive models, program testing, regression analysis, reusable code, software reusability, Training},
	pages = {164--173},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/TVC36XMI/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/W6Z3GZB2/Businge et al. - 2012 - Compatibility Prediction of Eclipse Third-Party Pl.pdf:application/pdf}
}

@inproceedings{mcdonnell_empirical_2013,
	title = {An {Empirical} {Study} of {API} {Stability} and {Adoption} in the {Android} {Ecosystem}},
	doi = {10.1109/ICSM.2013.18},
	abstract = {When APIs evolve, clients make corresponding changes to their applications to utilize new or updated APIs. Despite the benefits of new or updated APIs, developers are often slow to adopt the new APIs. As a first step toward understanding the impact of API evolution on software ecosystems, we conduct an in-depth case study of the co-evolution behavior of Android API and dependent applications using the version history data found in github. Our study confirms that Android is evolving fast at a rate of 115 API updates per month on average. Client adoption, however, is not catching up with the pace of API evolution. About 28\% of API references in client applications are outdated with a median lagging time of 16 months. 22\% of outdated API usages eventually upgrade to use newer API versions, but the propagation time is about 14 months, much slower than the average API release interval (3 months). Fast evolving APIs are used more by clients than slow evolving APIs but the average time taken to adopt new versions is longer for fast evolving APIs. Further, API usage adaptation code is more defect prone than the one without API usage adaptation. This may indicate that developers avoid API instability.},
	booktitle = {2013 29th {IEEE} {International} {Conference} on {Software} {Maintenance} ({ICSM})},
	author = {McDonnell, T. and Ray, B. and Kim, Miryung},
	month = sep,
	year = {2013},
	keywords = {Android API coevolution behavior, Android ecosystem, Androids, API evolution, API stability, API usage adaptation code, application program interfaces, github, Google, History, Humanoid robots, Mobile communication, mobile computing, operating systems (computers), smart phones, Software, software ecosystems, software maintenance, version history data},
	pages = {70--79},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/3AXSA8M5/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/9QX3WGSS/McDonnell et al. - 2013 - An Empirical Study of API Stability and Adoption i.pdf:application/pdf}
}

@inproceedings{dig_reba:_2008,
	address = {New York, NY, USA},
	series = {{ICSE} '08},
	title = {{ReBA}: {Refactoring}-aware {Binary} {Adaptation} of {Evolving} {Libraries}},
	isbn = {978-1-60558-079-1},
	shorttitle = {{ReBA}},
	url = {http://doi.acm.org/10.1145/1368088.1368148},
	doi = {10.1145/1368088.1368148},
	abstract = {Although in theory the APIs of software libraries and frameworks should be stable, they change in practice. This forces clients of the library API to change as well, making software maintenance expensive. Changing a client might not even be an option if its source code is missing or certain policies forbid its change. By giving a library both the old and the new API, clients can be shielded from API changes and can run with the new version of the library. This paper presents our solution and a tool, ReBA, that automatically generates compatibility layers between new library APIs and old clients. In the first stage, ReBA generates another version of the library, called adapted-library, that supports both the old and the new APIs. In the second stage, ReBA shrinks the adapted-library into a minimal, client-specific compatibility layer containing only classes truly required by the client. Evaluations on controlled experiments and case studies using Eclipse core libraries shows that our approach effectively adapts clients to new library versions, and is efficient.},
	urldate = {2015-12-16},
	booktitle = {Proceedings of the 30th {International} {Conference} on {Software} {Engineering}},
	publisher = {ACM},
	author = {Dig, Danny and Negara, Stas and Mohindra, Vibhu and Johnson, Ralph},
	year = {2008},
	keywords = {api compatibility, component reuse, Libraries, refactoring},
	pages = {441--450},
	file = {ACM Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/IKEQ2QPN/Dig et al. - 2008 - ReBA Refactoring-aware Binary Adaptation of Evolv.pdf:application/pdf}
}

@inproceedings{robbes_how_2012,
	address = {New York, NY, USA},
	series = {{FSE} '12},
	title = {How {Do} {Developers} {React} to {API} {Deprecation}?: {The} {Case} of a {Smalltalk} {Ecosystem}},
	isbn = {978-1-4503-1614-9},
	shorttitle = {How {Do} {Developers} {React} to {API} {Deprecation}?},
	url = {http://doi.acm.org/10.1145/2393596.2393662},
	doi = {10.1145/2393596.2393662},
	abstract = {When the Application Programming Interface (API) of a framework or library changes, its clients must be adapted. This change propagation---known as a ripple effect---is a problem that has garnered interest: several approaches have been proposed in the literature to react to these changes. Although studies of ripple effects exist at the single system level, no study has been performed on the actual extent and impact of these API changes in practice, on an entire software ecosystem associated with a community of developers. This paper reports on an empirical study of API deprecations that led to ripple effects across an entire ecosystem. Our case study subject is the development community gravitating around the Squeak and Pharo software ecosystems: seven years of evolution, more than 3,000 contributors, and more than 2,600 distinct systems. We analyzed 577 methods and 186 classes that were deprecated, and answer research questions regarding the frequency, magnitude, duration, adaptation, and consistency of the ripple effects triggered by API changes.},
	urldate = {2015-12-16},
	booktitle = {Proceedings of the {ACM} {SIGSOFT} 20th {International} {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Robbes, Romain and Lungu, Mircea and Röthlisberger, David},
	year = {2012},
	keywords = {Ecosystems, Empirical Studies, Mining Software Repositories},
	pages = {56:1--56:11},
	file = {ACM Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/5HF2TK65/Robbes et al. - 2012 - How Do Developers React to API Deprecation The C.pdf:application/pdf}
}

@inproceedings{kim_empirical_2011,
	address = {New York, NY, USA},
	series = {{ICSE} '11},
	title = {An {Empirical} {Investigation} into the {Role} of {API}-level {Refactorings} {During} {Software} {Evolution}},
	isbn = {978-1-4503-0445-0},
	url = {http://doi.acm.org/10.1145/1985793.1985815},
	doi = {10.1145/1985793.1985815},
	abstract = {It is widely believed that refactoring improves software quality and programmer productivity by making it easier to maintain and understand software systems. However, the role of refactorings has not been systematically investigated using fine-grained evolution history. We quantitatively and qualitatively studied API-level refactorings and bug fixes in three large open source projects, totaling 26523 revisions of evolution. The study found several surprising results: One, there is an increase in the number of bug fixes after API-level refactorings. Two, the time taken to fix bugs is shorter after API-level refactorings than before. Three, a large number of refactoring revisions include bug fixes at the same time or are related to later bug fix revisions. Four, API-level refactorings occur more frequently before than after major software releases. These results call for re-thinking refactoring's true benefits. Furthermore, frequent floss refactoring mistakes observed in this study call for new software engineering tools to support safe application of refactoring and behavior modifying edits together.},
	urldate = {2015-12-16},
	booktitle = {Proceedings of the 33rd {International} {Conference} on {Software} {Engineering}},
	publisher = {ACM},
	author = {Kim, Miryung and Cai, Dongxiang and Kim, Sunghun},
	year = {2011},
	keywords = {defects, empirical study, refactoring, release cycle, software evolution},
	pages = {151--160},
	file = {ACM Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/PTMN4R3X/Kim et al. - 2011 - An Empirical Investigation into the Role of API-le.pdf:application/pdf}
}

@inproceedings{german_evolution_2013,
	title = {The {Evolution} of the {R} {Software} {Ecosystem}},
	doi = {10.1109/CSMR.2013.33},
	abstract = {Software ecosystems form the heart of modern companies' collaboration strategies with end users, open source developers and other companies. An ecosystem consists of a core platform and a halo of user contributions that provide value to a company or project. In order to sustain the level and number of high-quality contributions, it is crucial for companies and contributors to understand how ecosystems tend to evolve and can be maintained successfully over time. As a first step, this paper explores the evolution characteristics of the statistical computing project GNU R, which is a successful, end-user programming ecosystem. We find that the ecosystem of user-contributed R packages has been growing steadily since R's conception, at a significantly faster rate than core packages, yet each individual package remains stable in size. We also identified differences in the way user-contributed and core packages are able to attract an active community of users.},
	booktitle = {2013 17th {European} {Conference} on {Software} {Maintenance} and {Reengineering} ({CSMR})},
	author = {German, D.M. and Adams, B. and Hassan, A.E.},
	month = mar,
	year = {2013},
	keywords = {Communities, Companies, Documentation, Ecosystems, Electronic mail, Evolution, GNU R statistical computing project, Programming, R, R software ecosystem, Software, software ecosystems, software engineering, software evolution, software packages, user community, user-contributed R package, user contribution, user interfaces},
	pages = {243--252},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/B7RX7XHP/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/36GM3XQ2/German et al. - 2013 - The Evolution of the R Software Ecosystem.pdf:application/pdf}
}

@inproceedings{dig_role_2005,
	title = {The role of refactorings in {API} evolution},
	doi = {10.1109/ICSM.2005.90},
	abstract = {Frameworks and libraries change their APIs. Migrating an application to the new API is tedious and disrupts the development process. Although some tools and ideas have been proposed to solve the evolution of APIs, most updates are done manually. To better understand the requirements for migration tools we studied the API changes of three frameworks and one library. We discovered that the changes that break existing applications are not random, but they tend to fall into particular categories. Over 80\% of these changes are refactorings. This suggests that refactoring-based migration tools should be used to update applications.},
	booktitle = {Proceedings of the 21st {IEEE} {International} {Conference} on {Software} {Maintenance}, 2005. {ICSM}'05},
	author = {Dig, D. and Johnson, R.},
	month = sep,
	year = {2005},
	keywords = {API evolution, application program interfaces, Application software, Computer languages, Computer science, Costs, operating systems, Programming profession, refactoring-based migration tools, software libraries, software maintenance, software prototyping, Software systems, software tools},
	pages = {389--398},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/GEZND2HC/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/Q7F938IR/Dig e Johnson - 2005 - The role of refactorings in API evolution.pdf:application/pdf}
}

@inproceedings{bavota_evolution_2013,
	title = {The {Evolution} of {Project} {Inter}-dependencies in a {Software} {Ecosystem}: {The} {Case} of {Apache}},
	shorttitle = {The {Evolution} of {Project} {Inter}-dependencies in a {Software} {Ecosystem}},
	doi = {10.1109/ICSM.2013.39},
	abstract = {Software ecosystems consist of multiple software projects, often interrelated each other by means of dependency relations. When one project undergoes changes, other projects may decide to upgrade the dependency. For example, a project could use a new version of another project because the latter has been enhanced or subject to some bug-fixing activities. This paper reports an exploratory study aimed at observing the evolution of the Java subset of the Apache ecosystem, consisting of 147 projects, for a period of 14 years, and resulting in 1,964 releases. Specifically, we analyze (i) how dependencies change over time, (ii) whether a dependency upgrade is due to different kinds of factors, such as different kinds of API changes or licensing issues, and (iii) how an upgrade impacts on a related project. Results of this study help to comprehend the phenomenon of library/component upgrade, and provides the basis for a new family of recommenders aimed at supporting developers in the complex (and risky) activity of managing library/component upgrade within their software projects.},
	booktitle = {2013 29th {IEEE} {International} {Conference} on {Software} {Maintenance} ({ICSM})},
	author = {Bavota, G. and Canfora, G. and Di Penta, M. and Oliveto, R. and Panichella, S.},
	month = sep,
	year = {2013},
	keywords = {Apache ecosystem, API, data mining, Ecosystems, History, Java, Java subset, Libraries, Licenses, multiple software projects, project inter-dependencies, Software, software ecosystem, software engineering, software management},
	pages = {280--289},
	file = {IEEE Xplore Abstract Record:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/2WP78B5M/abs_all.html:text/html;IEEE Xplore Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/H5S6PTR8/Bavota et al. - 2013 - The Evolution of Project Inter-dependencies in a S.pdf:application/pdf}
}

@inproceedings{linares-vasquez_how_2014,
	address = {New York, NY, USA},
	series = {{ICPC} 2014},
	title = {How {Do} {API} {Changes} {Trigger} {Stack} {Overflow} {Discussions}? {A} {Study} on the {Android} {SDK}},
	isbn = {978-1-4503-2879-1},
	shorttitle = {How {Do} {API} {Changes} {Trigger} {Stack} {Overflow} {Discussions}?},
	url = {http://doi.acm.org/10.1145/2597008.2597155},
	doi = {10.1145/2597008.2597155},
	abstract = {The growing number of questions related to mobile development in StackOverflow highlights an increasing interest of software developers in mobile programming. For the Android platform, 213,836 questions were tagged with Android-related labels in StackOverflow between July 2008 and August 2012. This paper aims at investigating how changes occurring to Android APIs trigger questions and activity in StackOverflow, and whether this is particularly true for certain kinds of changes. Our findings suggest that Android developers usually have more questions when the behavior of APIs is modified. In addition, deleting public methods from APIs is a trigger for questions that are (i) more discussed and of major interest for the community, and (ii) posted by more experienced developers. In general, results of this paper provide important insights about the use of social media to learn about changes in software ecosystems, and establish solid foundations for building new recommenders for notifying developers/managers about important changes and recommending them relevant crowdsourced solutions},
	urldate = {2016-01-08},
	booktitle = {Proceedings of the 22Nd {International} {Conference} on {Program} {Comprehension}},
	publisher = {ACM},
	author = {Linares-Vásquez, Mario and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and Poshyvanyk, Denys},
	year = {2014},
	keywords = {Android, API changes, Social media, StackOverflow},
	pages = {83--94},
	file = {ACM Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/H4RDHHKV/Linares-Vásquez et al. - 2014 - How Do API Changes Trigger Stack Overflow Discussi.pdf:application/pdf}
}

@inproceedings{asaduzzaman_bug_2012,
	address = {Piscataway, NJ, USA},
	series = {{MSR} '12},
	title = {Bug {Introducing} {Changes}: {A} {Case} {Study} with {Android}},
	isbn = {978-1-4673-1761-0},
	shorttitle = {Bug {Introducing} {Changes}},
	url = {http://dl.acm.org/citation.cfm?id=2664446.2664463},
	abstract = {Changes, a rather inevitable part of software development can cause maintenance implications if they introduce bugs into the system. By isolating and characterizing these bug introducing changes it is possible to uncover potential risky source code entities or issues that produce bugs. In this paper, we mine the bug introducing changes in the Android platform by mapping bug reports to the changes that introduced the bugs. We then use the change information to look for both potential problematic parts and dynamics in development that can cause maintenance implications. We believe that the results of our study can help better manage Android software development.},
	urldate = {2016-01-11},
	booktitle = {Proceedings of the 9th {IEEE} {Working} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {IEEE Press},
	author = {Asaduzzaman, Muhammad and Bullock, Michael C. and Roy, Chanchal K. and Schneider, Kevin A.},
	year = {2012},
	keywords = {bug, bug report, change log, fixes},
	pages = {116--119},
	file = {ACM Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/FQIV46W4/Asaduzzaman et al. - 2012 - Bug Introducing Changes A Case Study with Android.pdf:application/pdf}
}

@inproceedings{linares-vasquez_api_2013,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2013},
	title = {{API} {Change} and {Fault} {Proneness}: {A} {Threat} to the {Success} of {Android} {Apps}},
	isbn = {978-1-4503-2237-9},
	shorttitle = {{API} {Change} and {Fault} {Proneness}},
	url = {http://doi.acm.org/10.1145/2491411.2491428},
	doi = {10.1145/2491411.2491428},
	abstract = {During the recent years, the market of mobile software applications (apps) has maintained an impressive upward trajectory. Many small and large software development companies invest considerable resources to target available opportunities. As of today, the markets for such devices feature over 850K+ apps for Android and 900K+ for iOS. Availability, cost, functionality, and usability are just some factors that determine the success or lack of success for a given app. Among the other factors, reliability is an important criteria: users easily get frustrated by repeated failures, crashes, and other bugs; hence, abandoning some apps in favor of others.   This paper reports a study analyzing how the fault- and change-proneness of APIs used by 7,097 (free) Android apps relates to applications' lack of success, estimated from user ratings. Results of this study provide important insights into a crucial issue: making heavy use of fault- and change-prone APIs can negatively impact the success of these apps.},
	urldate = {2016-01-11},
	booktitle = {Proceedings of the 2013 9th {Joint} {Meeting} on {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Linares-Vásquez, Mario and Bavota, Gabriele and Bernal-Cárdenas, Carlos and Di Penta, Massimiliano and Oliveto, Rocco and Poshyvanyk, Denys},
	year = {2013},
	keywords = {Android, API changes, Empirical Studies, Mining Software Repositories},
	pages = {477--487},
	file = {ACM Full Text PDF:/Users/riganelli/Library/Application Support/Firefox/Profiles/e7f5ovxh.default/zotero/storage/PI3JQCQ5/Linares-Vásquez et al. - 2013 - API Change and Fault Proneness A Threat to the Su.pdf:application/pdf}
}